/*
 * Local execution profile optimized for 22 CPU, 64GB RAM system
 * Includes segmentation fault prevention measures for PopPUNK
 */

params {
    // Resource allocation (leaving overhead for system)
    max_memory = '56 GB'  // Leave 8GB for system overhead
    max_cpus = 20         // Leave 2 CPUs for system overhead
    max_time = '240.h'
    
    // PopPUNK-specific settings to prevent segmentation faults
    threads = 16          // Conservative thread count for PopPUNK stability
    ram = '48 GB'         // Conservative memory allocation
    
    // PopPUNK stability settings
    poppunk_stable = false        // Disable --stable to prevent segfaults
    poppunk_reciprocal = true     // Use reciprocal-only for stability
    poppunk_count_unique = false  // Disable to reduce memory pressure
    poppunk_max_search = 15       // Reduce search depth to prevent crashes
    poppunk_K = 2                 // Reduce mixture components for stability
    
    // Conservative QC settings
    poppunk_max_zero_dist = 2
    poppunk_max_merge = 2
    poppunk_length_sigma = 3
    poppunk_retain_failures = false
}

process {
    executor = 'local'
    errorStrategy = 'retry'
    maxRetries = 3
    
    // Global resource limits
    cpus = { check_max(task.attempt * 2, 'cpus') }
    memory = { check_max(8.GB * task.attempt, 'memory') }
    time = { check_max(4.h * task.attempt, 'time') }
    
    // Process-specific optimizations for segfault prevention
    withName: 'VALIDATE_FASTA' {
        cpus = 4
        memory = '8 GB'
        time = '1.h'
    }
    
    withName: 'MASH_SKETCH' {
        cpus = { check_max(12, 'cpus') }
        memory = { check_max(24.GB, 'memory') }
        time = '2.h'
    }
    
    withName: 'MASH_DIST' {
        cpus = { check_max(16, 'cpus') }
        memory = { check_max(32.GB, 'memory') }
        time = '4.h'
    }
    
    withName: 'BIN_SUBSAMPLE' {
        cpus = 2
        memory = '8 GB'
        time = '30.m'
    }
    
    // CRITICAL: PopPUNK model building with segfault prevention
    withName: 'POPPUNK_MODEL' {
        cpus = { check_max(12, 'cpus') }  // Conservative CPU count
        memory = { check_max(40.GB, 'memory') }  // Generous memory
        time = '8.h'
        errorStrategy = 'retry'
        maxRetries = 3
        // Additional JVM options to prevent segfaults
        containerOptions = '--shm-size=8g --ulimit memlock=-1:-1'
    }
    
    // CRITICAL: PopPUNK assignment with segfault prevention
    withName: 'POPPUNK_ASSIGN' {
        cpus = { check_max(8, 'cpus') }   // Very conservative CPU count
        memory = { check_max(48.GB, 'memory') }  // Maximum available memory
        time = '12.h'
        errorStrategy = 'retry'
        maxRetries = 3
        // Additional container options for stability
        containerOptions = '--shm-size=8g --ulimit memlock=-1:-1 --ulimit nofile=65536:65536'
    }
    
    withName: 'SUMMARY_REPORT' {
        cpus = 2
        memory = '4 GB'
        time = '30.m'
    }
    
    // PopPIPE processes - optimized for local execution
    withName: 'SPLIT_STRAINS' {
        cpus = 2
        memory = '4 GB'
        time = '1.h'
    }
    
    withName: 'SKETCHLIB_DISTS' {
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(16.GB, 'memory') }
        time = '4.h'
    }
    
    withName: 'GENERATE_NJ' {
        cpus = 4
        memory = '8 GB'
        time = '2.h'
    }
    
    withName: 'SKA_BUILD' {
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(16.GB, 'memory') }
        time = '4.h'
    }
    
    withName: 'SKA_ALIGN' {
        cpus = 4
        memory = '8 GB'
        time = '2.h'
    }
    
    withName: 'SKA_MAP' {
        cpus = 4
        memory = '8 GB'
        time = '2.h'
    }
    
    withName: 'IQ_TREE' {
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(16.GB, 'memory') }
        time = '6.h'
    }
    
    withName: 'GUBBINS' {
        cpus = { check_max(6, 'cpus') }
        memory = { check_max(12.GB, 'memory') }
        time = '4.h'
    }
    
    withName: 'FASTBAPS' {
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(16.GB, 'memory') }
        time = '4.h'
    }
    
    withName: 'CLUSTER_SUMMARY' {
        cpus = 2
        memory = '4 GB'
        time = '30.m'
    }
}

// Helper function to check resource limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Docker configuration optimized for local execution
docker {
    enabled = true
    runOptions = '--user $(id -u):$(id -g) --shm-size=8g'
    fixOwnership = true
    temp = 'auto'
}

// Ensure Singularity is disabled
singularity {
    enabled = false
}

// Enhanced reporting for debugging with overwrite enabled
report {
    enabled = true
    overwrite = true
    file = "${params.resultsDir}/reports/execution_report_local.html"
}

timeline {
    enabled = true
    overwrite = true
    file = "${params.resultsDir}/reports/timeline_local.html"
}

dag {
    enabled = true
    overwrite = true
    file = "${params.resultsDir}/reports/pipeline_dag_local.html"
}

trace {
    enabled = true
    overwrite = true
    file = "${params.resultsDir}/reports/trace_local.txt"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,submit,start,complete,duration,realtime'
    raw = false
}